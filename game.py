import app.const as const, app.keyboard as kb
import os, asyncio, random
from typing import List, Dict, Optional

# aiogram –∏–º–ø–æ—Ä—Ç—ã
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery

# –¥–æ—Å—Ç–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
from dotenv import main


main.load_dotenv()


# –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –ë–î
bot = Bot(os.getenv("BOT_TOKEN"), parse_mode=ParseMode.HTML)
dp = Dispatcher()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
active_sessions: Dict[int, "GameSession"] = {}


class GameSession:
    def __init__(self):
        self.used_cards: List[int] = []  # –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö ID –æ–±—ã—á–Ω—ã—Ö –∫–∞—Ä—Ç
        self.used_penalty: List[int] = []  # –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö ID —à—Ç—Ä–∞—Ñ–æ–≤

    async def get_unique_card(self) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ None,
        –µ—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã"""
        available_cards = [
            card_id for card_id in const.CARDS.keys() if card_id not in self.used_cards
        ]

        if not available_cards:
            return None

        card_id = random.choice(available_cards)
        card_data = const.CARDS[card_id]
        self.used_cards.append(card_id)

        return {"id": card_id, "theme": card_data["theme"], "qst": card_data["qst"]}

    async def get_unique_penalty(self) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ –∏–ª–∏ None,
        –µ—Å–ª–∏ –≤—Å–µ —à—Ç—Ä–∞—Ñ—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã"""
        available_penalty = [
            p_id for p_id in const.PENALTY.keys() if p_id not in self.used_penalty
        ]

        if not available_penalty:
            return None

        penalty_id = random.choice(available_penalty)
        penalty_data = const.PENALTY[penalty_id]
        self.used_penalty.append(penalty_id)

        return {"id": penalty_id, "qst": penalty_data["qst"]}


def get_game_session(chat_id: int) -> GameSession:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ chat_id,
    —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—É—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    if chat_id not in active_sessions:
        active_sessions[chat_id] = GameSession()
    return active_sessions[chat_id]


def end_game_session(chat_id: int) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ chat_id"""
    if chat_id in active_sessions:
        del active_sessions[chat_id]


@dp.callback_query(F.data == "yes")
async def handle_yes(call: CallbackQuery):
    game_session = get_game_session(call.message.chat.id)
    card = await game_session.get_unique_card()

    if card:
        text = (
            f"üÉè –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏: {card['id']}\n"
            f"üè∑ –¢–µ–º–∞: {card['theme']}\n"
            f"üìå –ó–∞–¥–∞–Ω–∏–µ: {card['qst']}\n\n"
            "–í—ã–ø–æ–ª–Ω–∏—à—å? –ò–ª–∏ –≤–æ–∑—å–º—ë—à—å —à—Ç—Ä–∞—Ñ?"
        )
        await call.message.answer(text, reply_markup=kb.game_answer())
    else:
        await call.message.answer("–í—Å–µ –∫–∞—Ä—Ç—ã –≤ —ç—Ç–æ–π –∏–≥—Ä–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã!")
        end_game_session(call.message.chat.id)
    await call.answer()


@dp.callback_query(F.data == "no")
async def handle_no(call: CallbackQuery):
    game_session = get_game_session(call.message.chat.id)
    penalty = await game_session.get_unique_penalty()

    if penalty:
        text = (
            f"üí¢ –®—Ç—Ä–∞—Ñ #{penalty['id']}\n"
            f"üìõ –ó–∞–¥–∞–Ω–∏–µ: {penalty['qst']}\n\n"
            f"–í—ã–ø–æ–ª–Ω–∏ —ç—Ç–æ—Ç —à—Ç—Ä–∞—Ñ –≤–º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!"
        )
        await call.message.answer(text, reply_markup=kb.penalty())
    else:
        await call.message.answer(
            "–í—Å–µ —à—Ç—Ä–∞—Ñ—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã! –ü—Ä–∏–¥–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ üòà",
            reply_markup=kb.penalty()
        )
    await call.answer()


@dp.callback_query(F.data == "menu")
async def start_game(call: CallbackQuery):
    await call.message.answer(text="–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä—ã —Å–±—Ä–æ—à–µ–Ω!")
    await call.message.answer(text=const.END_GAME_TEXT,
                              reply_markup=kb.main_menu())
    end_game_session(call.message.chat.id)
    await call.answer()
    exit()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())  # –æ—Ç—Å—Ç–∞–Ω—å—Ç–µ, —ç—Ç–æ –±–µ—Å—Ç-–ø—Ä–∞–∫—Ç–∏—Å
